import axios from "axios";
import OpenAI from "openai";
import { Readable } from "stream";
import { POLICY_RULES } from "../utils/amandaPrompt";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/* =========================
   Detectores
   ========================= */
const RE_PLANS = /\b(ipasgo|unimed|amil|bradesco|sul\s*am√©rica|sulamerica|hapvida|assim|golden\s*cross|notre\s*dame|interm[e√©]dica|intermedica|base|plano[s]?|conv[e√™]nio[s]?)\b/i;
const RE_CDL = /\bcdl\b/i;
const RE_SESSION = /\b(sess[a√£]o|avulsa|por\s*sess[a√£]o)\b/i;
const RE_PACKAGE = /\b(pacote|mensal|plano\s*mensal)\b/i;

/* =========================
   1) Follow-up curto (rota /draft etc.)
   ========================= */
function personalizeIntro(origin = "") {
    const o = (origin || "").toLowerCase();
    if (o.includes("google")) return "Vimos seu contato pelo Google e ficamos felizes em ajudar. ";
    if (o.includes("instagram") || o.includes("facebook") || o.includes("meta"))
        return "Recebemos sua mensagem pelo Instagram, que bom falar com voc√™! ";
    if (o.includes("indica")) return "Agradecemos a indica√ß√£o! ";
    return "";
}

export async function generateFollowupMessage(lead) {
    const name = lead?.name?.split(" ")[0] || "tudo bem";
    const reason = lead?.reason || "avalia√ß√£o/terapia";
    const origin = lead?.origin || "WhatsApp";

    const system = `
Voc√™ √© a Amanda üíö, assistente da Cl√≠nica Fono Inova (An√°polis-GO).
Estilo: acolhedor, claro e curto (1‚Äì3 frases). SEM links. Use exatamente 1 üíö.
Idioma: pt-BR.
${POLICY_RULES}
`.trim();

    const user = `
${personalizeIntro(origin)}Gere uma mensagem curta de follow-up para ${name}.
Contexto:
- Origem: ${origin}
- Motivo do contato: ${reason}
- √öltima intera√ß√£o: ${lead?.lastInteraction || "h√° alguns dias"}
Objetivo: reengajar e facilitar o agendamento.
Regras:
- Use exatamente 1 emoji üíö (obrigat√≥rio).
- Ofere√ßa no m√°ximo 2 janelas de hor√°rio, se fizer sentido.
- Termine com: "Posso te ajudar a agendar agora?".
`.trim();

    try {
        let resp;
        try {
            resp = await openai.chat.completions.create({
                model: "gpt-5-mini",
                temperature: 0.7,
                max_tokens: 140,
                messages: [
                    { role: "system", content: system },
                    { role: "user", content: user },
                ],
            });
        } catch {
            resp = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                temperature: 0.7,
                max_tokens: 140,
                messages: [
                    { role: "system", content: system },
                    { role: "user", content: user },
                ],
            });
        }

        const text = resp.choices?.[0]?.message?.content?.trim();
        const out =
            text ||
            `Oi ${name}, tudo bem? Podemos retomar sobre ${reason}. Temos hor√°rios flex√≠veis. Posso te ajudar a agendar agora? üíö`;
        return out.includes("üíö") ? out : `${out} üíö`;
    } catch {
        return `Oi ${name}, tudo bem? Passando para saber se posso te ajudar com ${reason}. Temos hor√°rios flex√≠veis nesta semana. Posso te ajudar a agendar agora? üíö`;
    }
}

/* =========================
   2) Resposta conversacional (webhook/chat)
   ========================= */
const RE_SCHEDULE = /\b(agendar|marcar|marca√ß√£o|agenda|hor[a√°]rio|consulta|agendamento)\b/i;
const RE_PRICE = /\b(pre[c√ß]o|valor|custa|quanto|mensal|pacote|planos?)\b/i;
const RE_ADDRESS = /\b(endere[c√ß]o|local|onde fica|mapa)\b/i;
const RE_PAYMENT = /\b(pagamento|pix|cart[a√£]o|dinheiro|cr[e√©]dito|d[e√©]bito)\b/i;
const RE_HOURS = /\b(hor[√°a]rio[s]? de atendimento|abre|fecha|funcionamento)\b/i;
const RE_GREET = /^(oi|ol[a√°]|boa\s*(tarde|noite|dia)|tudo\s*bem|bom\s*dia|fala|e[a√≠i])[\s!,.]*$/i;

export async function generateAmandaReply({ userText, lead = {}, context = {} }) {
    const name = (lead?.name || "").split(" ")[0] || "";
    const reason = lead?.reason || "avalia√ß√£o/terapia";
    const origin = lead?.origin || "WhatsApp";

    const text = (userText || "").trim(); // <- definir antes de usar
    const wantsSchedule = RE_SCHEDULE.test(text);
    const asksPrice = RE_PRICE.test(text);
    const asksAddress = RE_ADDRESS.test(text);
    const asksPayment = RE_PAYMENT.test(text);
    const asksHours = RE_HOURS.test(text);
    const asksPlans = RE_PLANS.test(text); // <- agora correto (ap√≥s text)

    const lastMsgs = Array.isArray(context?.lastMessages)
        ? context.lastMessages.slice(-5)
        : [];
    const isFirstContact =
        !!context?.isFirstContact || lastMsgs.length === 0 || RE_GREET.test(text);

    const system = `
Voc√™ √© a Amanda üíö, assistente da Cl√≠nica Fono Inova (An√°polis-GO).
Estilo: acolhedor, claro e curto (1‚Äì3 frases). SEM links. Use exatamente 1 üíö.
Assine como "Equipe Fono Inova üíö".
Idioma: pt-BR.
Nunca invente hor√°rios/valores. Se precisar confirmar algo: "Vou verificar e j√° te retorno, por favor um momento üíö".
Regras comerciais:
${POLICY_RULES}
`.trim();

    const userPrompt = isFirstContact
        ? `
Contexto: primeiro contato (sauda√ß√£o/abertura).
Mensagem do cliente: """${text}"""

Objetivo:
1) Cumprimente (use o nome se souber).
2) Pergunte no que pode ajudar.
3) Se fizer sentido, ofere√ßa 2 caminhos simples (avalia√ß√£o ou tirar d√∫vidas).
4) N√ÉO ofere√ßa hor√°rios agora.
Regras:
- 1‚Äì3 frases; 1 üíö; finalize convidando a pessoa a dizer a necessidade.
`.trim()
        : `
Contexto: conversa em andamento.
Mensagem do cliente: """${text}"""
Lead: nome=${name || "(desconhecido)"}; motivo=${reason}; origem=${origin}
Sinais: wantsSchedule=${wantsSchedule}; asksPrice=${asksPrice}; asksAddress=${asksAddress}; asksPayment=${asksPayment}; asksHours=${asksHours}; asksPlans=${asksPlans}

Objetivo:
- Responda objetivamente em 1‚Äì3 frases.
- Se asksPlans=true: diga que estamos em credenciamento e que atendemos particular (avalia√ß√£o R$ 220).
- Se pedirem valores:
  ‚Ä¢ Se mencionar ‚ÄúCDL‚Äù: avalia√ß√£o R$ 200 (CDL).
  ‚Ä¢ Se perguntar sobre ‚Äúsess√£o‚Äù: ‚ÄúSess√£o individual R$ 220; no pacote mensal sai por R$ 180 por sess√£o (~R$ 720/m√™s)‚Äù.
  ‚Ä¢ Se perguntar sobre ‚Äúpacote‚Äù: explique o pacote (R$ 180/sess√£o, ~R$ 720/m√™s).
  ‚Ä¢ Se for gen√©rico (‚Äúpre√ßo/valor?‚Äù): responda s√≥ avalia√ß√£o particular R$ 220.
- Se pedirem endere√ßo/hor√°rio/pagamento e voc√™ n√£o tiver 100% de certeza: diga ‚ÄúVou verificar e j√° te retorno, por favor um momento üíö‚Äù e fa√ßa 1 pergunta objetiva.
- S√≥ ofere√ßa hor√°rios se wantsSchedule=true; ofere√ßa no m√°ximo 2 op√ß√µes objetivas.

Regras:
- 1‚Äì3 frases, 1 üíö, final propositivo; assine ‚ÄúEquipe Fono Inova üíö‚Äù.
- N√£o citar CDL se o cliente n√£o mencionar.
- N√£o citar pacote se o cliente n√£o mencionar (exceto na resposta sobre ‚Äúsess√£o‚Äù, onde a compara√ß√£o √© permitida).
`.trim();

    try {
        let resp;
        try {
            resp = await openai.chat.completions.create({
                model: "gpt-5-mini",
                temperature: isFirstContact ? 0.7 : 0.5,
                max_tokens: 180,
                messages: [
                    { role: "system", content: system },
                    { role: "user", content: userPrompt },
                ],
            });
        } catch {
            resp = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                temperature: isFirstContact ? 0.7 : 0.5,
                max_tokens: 180,
                messages: [
                    { role: "system", content: system },
                    { role: "user", content: userPrompt },
                ],
            });
        }

        let out = resp?.choices?.[0]?.message?.content?.trim() || "";

        /* ========= P√ìS-PROCESSAMENTO (garantias) ========= */

        // 0) Resposta de planos/conv√™nios (qualquer plano -> curto e padr√£o)
        if (!isFirstContact && asksPlans) {
            out =
                "Estamos em fase de credenciamento para planos/conv√™nios. No momento atendemos particular: avalia√ß√£o R$ 220. Posso te ajudar a agendar? üíö";
        }

        // 1) Bloquear oferta de hor√°rios se o cliente n√£o pediu agendamento
        if (!isFirstContact && !wantsSchedule) {
            out = out
                .replace(
                    /\b(amanh[a√£]|hoje|segunda|ter[c√ß]a|quarta|quinta|sexta|s[√°a]bado|domingo)\b[^.!\n]{0,60}\b(\d{1,2}h(\d{2})?)\b/gi,
                    ""
                )
                .replace(/\b(\d{1,2}\s*h(\s*\d{2})?)\b/gi, "")
                .replace(/\b(op[c√ß][a√£]o|hor[√°a]rio)s?:?[^.!\n]+/gi, "")
                .replace(/\s{2,}/g, " ")
                .trim();
        }

        // 2) Remover CDL se o cliente n√£o falou CDL
        const mentionsCDL = RE_CDL.test(text);
        if (!mentionsCDL) {
            out = out.replace(/\bcdl\b[^.!?\n]*?/gi, "").replace(/\s{2,}/g, " ").trim();
        }

        // 3) Pacote s√≥ quando perguntar por pacote OU sess√£o (compara√ß√£o permitida em sess√£o)
        const mentionsSession = RE_SESSION.test(text);
        const mentionsPackage = RE_PACKAGE.test(text);
        const canMentionPackage = mentionsPackage || mentionsSession;
        if (!canMentionPackage) {
            out = out
                .replace(/\b(pacote|mensal|plano\s*mensal)[^.!?\n]*[.!?]/gi, "")
                .replace(/\s{2,}/g, " ")
                .trim();
        }

        // 4) Se perguntou sess√£o, garantir compara√ß√£o 220 vs 180
        if (asksPrice && mentionsSession && !/R\$?\s*220/i.test(out)) {
            const base =
                "Sess√£o individual √© R$ 220; no pacote mensal sai por R$ 180 por sess√£o (~R$ 720/m√™s).";
            out = out ? `${out} ${base}` : base;
        }

        // 5) Limitar a 1‚Äì3 frases
        out = out.split(/(?<=[.!?])\s+/).slice(0, 3).join(" ").trim();

        // 6) Garantir üíö e assinatura
        if (!out.includes("üíö")) out += " üíö";
        if (!/Equipe Fono Inova üíö$/m.test(out.trim()))
            out += `\n\nEquipe Fono Inova üíö`;

        // 7) Fallbacks curtinhos
        if (!out.trim()) {
            out = isFirstContact
                ? `Oi${name ? `, ${name}` : ""}! Sou a Amanda da Fono Inova. Em que posso te ajudar hoje? üíö\n\nEquipe Fono Inova üíö`
                : `Vou verificar e j√° te retorno, por favor um momento üíö Qual per√≠odo fica melhor para voc√™ (manh√£ ou tarde)?\n\nEquipe Fono Inova üíö`;
        }

        return out;
    } catch {
        return isFirstContact
            ? `Oi${name ? `, ${name}` : ""}! Sou a Amanda da Fono Inova. Em que posso te ajudar hoje? üíö\n\nEquipe Fono Inova üíö`
            : `Vou verificar e j√° te retorno, por favor um momento üíö Qual per√≠odo fica melhor para voc√™ (manh√£ ou tarde)?\n\nEquipe Fono Inova üíö`;
    }
}

/* =========================
   3) √Åudio ‚Üí texto (Whisper)
   ========================= */
export async function transcribeWaAudioFromGraph({
    mediaUrl,
    fileName = "audio.ogg",
}) {
    try {
        const { data } = await axios.get(mediaUrl, {
            responseType: "arraybuffer",
            timeout: 20000,
        });
        const buffer = Buffer.from(data);

        // Node: passe um Readable com filename para o SDK
        const stream = Readable.from(buffer);
        // @ts-ignore ‚Äì atribu√≠mos um nome para o multipart
        stream.path = fileName;

        const resp = await openai.audio.transcriptions.create({
            file: stream, // stream + .path para nome do arquivo
            model: "whisper-1", // est√°vel p/ OGG/opus
            language: "pt",
            temperature: 0.2,
        });

        return (resp?.text || "").trim();
    } catch (e) {
        console.error("‚ùå transcribeWaAudioFromGraph:", e.message);
        return "";
    }
}

/* =========================
   4) Descri√ß√£o de imagem (curta)
   ========================= */
export async function describeWaImageFromGraph({ imageUrl, caption = "" }) {
    try {
        const resp = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            temperature: 0.4,
            max_tokens: 160,
            messages: [
                {
                    role: "system",
                    content:
                        "Voc√™ √© a Amanda üíö, assistente da Cl√≠nica Fono Inova. Descreva brevemente a imagem em 1‚Äì2 frases, sem inventar, em pt-BR. Se n√£o for poss√≠vel entender, diga que verificar√°.",
                },
                {
                    role: "user",
                    content: [
                        { type: "text", text: `Legenda do cliente: ${caption || "(sem legenda)"}` },
                        { type: "image_url", image_url: { url: imageUrl } },
                    ],
                },
            ],
        });

        return (resp.choices?.[0]?.message?.content || "").trim();
    } catch (e) {
        console.error("‚ùå describeWaImageFromGraph:", e.message);
        return "";
    }
}
