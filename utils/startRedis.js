import { execSync } from "child_process";
import net from "net";

export const ensureRedisRunning = async () => {
  // üöÄ Ignora completamente o start local se for ambiente de produ√ß√£o
  if (process.env.NODE_ENV === "production") {
    console.log("üü¢ Ambiente de produ√ß√£o detectado ‚Äî ignorando start local do Redis");
    console.log("üîó Use REDIS_URL para conectar a um Redis externo (Render Add-on ou Upstash)");
    return true;
  }

  return new Promise((resolve, reject) => {
    const checkRedis = () => {
      const client = net.createConnection({ port: 6379, host: "127.0.0.1" });

      client.on("connect", () => {
        console.log("‚úÖ Redis j√° est√° rodando em 127.0.0.1:6379");
        client.end();
        resolve(true);
      });

      client.on("error", () => {
        console.log("‚öôÔ∏è Redis n√£o est√° rodando ‚Äî iniciando automaticamente...");
        try {
          execSync("redis-server --daemonize yes");
          console.log("üöÄ Redis iniciado em background, aguardando inicializa√ß√£o...");
          setTimeout(() => {
            console.log("‚úÖ Redis pronto para uso!");
            resolve(true);
          }, 2000);
        } catch (err) {
          console.error("‚ùå Falha ao iniciar o Redis:", err.message);
          reject(err);
        }
      });
    };

    checkRedis();
  });
};
